import { get, getAsObject } from "@parameter1/base-web-object-path";
import imageValues from "./utils/image-values";
import imageHeight from "./utils/image-height";

$ const blockName = input.blockName || "node";
$ const element = `${blockName}__image-inner-wrapper`;

$ const {
  src,
  alt,
  isLogo,
  lazyload,
  imageAttrs,
} = input;

$ const usePlaceholder = input.usePlaceholder == null ? true : input.usePlaceholder;
$ const hasImage = Boolean(src);
$ const hasLink = Boolean(get(input, "link.href"));
$ const isPlaceholder = !hasImage && usePlaceholder;

$ const { width, height, modifier } = imageValues(input);

$ const modifiers = [];
$ if (modifier) modifiers.push(modifier);
$ if (input.gradient) modifiers.push("gradient");
$ if (isPlaceholder) modifiers.push("placeholder");
$ const classNames = [element, ...modifiers.map(mod => `${element}--${mod}`), input.class];

$ const options = {
  ...input.options,
  w: input.width,
  h: input.ar ? imageHeight(input.width, input.ar) : undefined,
};

$ const imageInput = {
  src,
  alt,
  width,
  height,
  options,
  isLogo,
  usePlaceholder,
  lazyload,
  attrs: imageAttrs,
};

<!-- @todo add modifiers -->

<if(hasImage || usePlaceholder)>
  <if(hasLink)>
    $ const linkAttrs = { ...input.attrs, ...getAsObject(input, "link.attrs") };
    <marko-core-link ...input.link attrs=linkAttrs class=classNames>
      <marko-web-node-image ...imageInput />
    </marko-core-link>
  </if>
  <else>
    <div ...input.attrs class=classNames>
      <marko-web-node-image ...imageInput />
    </div>
  </else>
</if>
